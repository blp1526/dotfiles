#!/usr/bin/env ruby

class GitClone
  attr_reader :command, :repository
  def initialize(argv)
    @repository = argv.delete_at(-1) || ''
    options = "#{argv.join(' ')} " || ''
    @command = "git clone #{options}"
  end

  def to_gopath
    exit_status = 1
    git_format = /\Agit@(.+?):(.+?)\/(.+?)\.git\z/
    https_format = /\Ahttps:\/\/(.+?)\/(.+?)\/(.+?)\.git\z/

    [git_format, https_format].each do |format|
      if  repository =~ format
        dir = "#{ENV['GOPATH']}/src/#{$1}/#{$2}/#{$3}"
        script = "#{command} #{repository} #{dir}"
        puts(script)
        ok = system(script)
        exit_status = 0 if ok
        return exit_status
      end
    end

    puts "Unexpected git repository, got #{repository}."
    return exit_status
  end
end

git_clone = GitClone.new(ARGV)
status = git_clone.to_gopath
exit status
